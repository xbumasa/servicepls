version: "3.1"
services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: servicepls-api
    container_name: api
    restart: unless-stopped
    user: $USERID:$GROUPID
    env_file: .env
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOST=db
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB
      - TOKEN_SECRET=$TOKEN_SECRET
      - CRYPT_TOKEN=$CRYPT_TOKEN
      - API_PORT=$API_PORT
    depends_on:
      - db
    expose:
      - $API_PORT
    volumes:
      - /etc/group:/etc/group:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/shadow:/etc/shadow:ro
    networks:
      - internal
      - web
    command: scripts/wait-for.sh db:$MONGO_PORT -- node_modules/.bin/nodemon /var/node/spapi/index.js

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: servicepls-app
    container_name: app
    restart: unless-stopped
    user: $USERID:$GROUPID
    env_file: .env
    environment:
      - NUXT_HOST=$NUXT_HOST
      - NUXT_PORT=$NUXT_PORT
    depends_on:
      - api
    expose:
      - $NUXT_PORT
    volumes:
      - /etc/group:/etc/group:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/shadow:/etc/shadow:ro
    networks:
      - web
    command: npm run start

  db:
    image: mongo:4.0.20-xenial
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:
      - dbdata:/data/db
    expose:
      - $MONGO_PORT
    networks:
      - internal

  proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: servicepls-proxy
    container_name: proxy
    restart: unless-stopped
    volumes:
      - ./nginx/prod:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web

networks:
  internal:
  web:

volumes:
  dbdata:
